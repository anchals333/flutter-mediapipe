// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * A classification category.
 *
 * Category is a util class, contains a label, its display name, a float
 * value as score, and the index of the label in the corresponding label file.
 * Typically it's used as the result of classification tasks.
 *
 * See also: https://developers.google.com/mediapipe/api/solutions/java/com/google/mediapipe/tasks/components/containers/Category
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class Category (
  /** The index of the label in the corresponding label file. */
  val index: Long? = null,
  /** The probability score of this label category. */
  val score: Double? = null,
  /**
   * The display name of the label, which may be translated for
   * different locales. For example, a label, "apple", may be translated into
   */
  val displayName: String? = null,
  /** The label of this category object. */
  val categoryName: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Category {
      val index = list[0].let { if (it is Int) it.toLong() else it as Long? }
      val score = list[1] as Double?
      val displayName = list[2] as String?
      val categoryName = list[3] as String?
      return Category(index, score, displayName, categoryName)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      index,
      score,
      displayName,
      categoryName,
    )
  }
}

/**
 * Represents the list of classification for a given classifier head.
 * Typically used as a result for classification tasks.
 *
 * See also: https://developers.google.com/mediapipe/api/solutions/java/com/google/mediapipe/tasks/components/containers/Classifications
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class Classifications (
  /**
   * The array of predicted categories, usually sorted by descending
   * scores (e.g. from high to low probability).
   */
  val categories: List<Category?>,
  /**
   * The index of the classifier head these categories refer to. This
   * is useful for multi-head models.
   */
  val headIndex: Long,
  /**
   * The name of the classifier head, which is the corresponding
   * tensor metadata name.
   */
  val headName: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Classifications {
      val categories = list[0] as List<Category?>
      val headIndex = list[1].let { if (it is Int) it.toLong() else it as Long }
      val headName = list[2] as String?
      return Classifications(categories, headIndex, headName)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      categories,
      headIndex,
      headName,
    )
  }
}

/**
 * Data returned from MediaPipe SDK.
 *
 * See also: https://developers.google.com/mediapipe/api/solutions/java/com/google/mediapipe/tasks/components/containers/ClassificationResult
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ClassificationResult (
  /** The classification results for each head of the model. */
  val classifications: List<Classifications?>,
  /**
   * The optional timestamp (in milliseconds) of the start of the chunk of
   * data corresponding to these results.
   */
  val timestampMs: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ClassificationResult {
      val classifications = list[0] as List<Classifications?>
      val timestampMs = list[1] as Double?
      return ClassificationResult(classifications, timestampMs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      classifications,
      timestampMs,
    )
  }
}

/**
 * See also: https://developers.google.com/mediapipe/api/solutions/java/com/google/mediapipe/tasks/text/textclassifier/TextClassifierResult
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class TextClassifierResult (
  /** The results of this classification request. */
  val classificationResult: ClassificationResult,
  /**
   * The optional timestamp (in milliseconds) of the start of the chunk of
   * data corresponding to these results.
   */
  val timestampMs: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): TextClassifierResult {
      val classificationResult = ClassificationResult.fromList(list[0] as List<Any?>)
      val timestampMs = list[1] as Double?
      return TextClassifierResult(classificationResult, timestampMs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      classificationResult.toList(),
      timestampMs,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object TextClassifierCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Category.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ClassificationResult.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Classifications.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TextClassifierResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Category -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is ClassificationResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is Classifications -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is TextClassifierResult -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface TextClassifier {
  fun classify(value: String, callback: (Result<TextClassifierResult>) -> Unit)

  companion object {
    /** The codec used by TextClassifier. */
    val codec: MessageCodec<Any?> by lazy {
      TextClassifierCodec
    }
    /** Sets up an instance of `TextClassifier` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: TextClassifier?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TextClassifier.classify", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val valueArg = args[0] as String
            api.classify(valueArg) { result: Result<TextClassifierResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
